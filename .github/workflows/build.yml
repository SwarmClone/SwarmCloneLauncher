name: Build AvaloniaUI (Win & Linux)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: 8.0.x
  PROJECT_PATH: SwarmCloneLauncher.csproj
  LAUNCH_DIR: Launch

jobs:
  build:
    name: ${{ matrix.rid }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - rid: win-x64
            os: windows-latest
          - rid: linux-x64
            os: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up UTF-8 encoding (Windows)
        if: runner.os == 'Windows'
        run: chcp 65001

      - name: Set up UTF-8 encoding (Linux)
        if: runner.os == 'Linux'
        run: echo "LANG=C.UTF-8" >> $GITHUB_ENV
        
      - name: Build C++ launch (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -S "${{ env.LAUNCH_DIR }}" -B "${{ env.LAUNCH_DIR }}/build" -DCMAKE_BUILD_TYPE=Release
          cmake --build "${{ env.LAUNCH_DIR }}/build" --config Release
          Copy-Item "${{ env.LAUNCH_DIR }}/build/Release/launch.exe" -Destination "launch.exe"

      - name: Build C++ launch (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -S "${{ env.LAUNCH_DIR }}" -B "${{ env.LAUNCH_DIR }}/build" -DCMAKE_BUILD_TYPE=Release
          cmake --build "${{ env.LAUNCH_DIR }}/build" --config Release
          cp "${{ env.LAUNCH_DIR }}/build/launch" ./launch

      - name: Restore NuGet packages
        run: dotnet restore "${{ env.PROJECT_PATH }}" -r ${{ matrix.rid }}

      - name: Publish .NET project (Framework-dependent)
        run: >
          dotnet publish "${{ env.PROJECT_PATH }}"
          -c Release
          -r ${{ matrix.rid }}
          --self-contained false
          -p:DebugSymbols=false
          -o "launcher"

      - name: Create final package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path final
          Copy-Item launch.exe -Destination final/
          
          New-Item -ItemType Directory -Force -Path final/launcher
          Copy-Item "launcher/*" -Recurse -Destination final/launcher/
          
          # 添加 .NET 运行时检查脚本
          @"
@echo off
dotnet --version >nul 2>&1
if %errorlevel% neq 0 (
    echo Error: .NET 8.0 runtime is not installed
    echo Please download from: https://dotnet.microsoft.com/download/dotnet/8.0
    pause
    exit 1
)
start "" launcher\SwarmCloneLauncher.exe
"@ | Out-File -FilePath "final\start.bat" -Encoding ASCII
          
          Compress-Archive -Path final/* -DestinationPath "${{ matrix.rid }}.zip"

      - name: Create final package (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p final
          cp launch final/
          
          mkdir -p final/launcher
          cp -r launcher/* final/launcher/
          
          chmod +x final/launcher/SwarmCloneLauncher
          
          echo '#!/bin/bash
          if ! command -v dotnet &> /dev/null; then
              echo "Error: .NET 8.0 runtime is not installed"
              echo "Please install from: https://dotnet.microsoft.com/download/dotnet/8.0"
              read -p "Press enter to continue"
              exit 1
          fi
          cd launcher
          ./SwarmCloneLauncher' > final/start.sh
          chmod +x final/start.sh
          
          echo "Final file size:"
          ls -lh final/launcher/SwarmCloneLauncher
          
          cd final
          zip -r "../${{ matrix.rid }}.zip" .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: ${{ matrix.rid }}.zip
